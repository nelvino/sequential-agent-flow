import { ChatOpenAI } from '@langchain/openai';
import { State } from '../components/State';
import { JsonOutputParser } from '@langchain/core/output_parsers';

export class CodeReviewer {
  model: ChatOpenAI;
  state: State;

  constructor({ model, state }: { model: ChatOpenAI; state: State }) {
    this.model = model;
    this.state = state;
  }

  async invoke() {
    // Print the full state for debugging
    console.log(`Full state before retrieving 'producedCode': ${JSON.stringify(this.state.getAll())}`);

    const producedCode = this.state.get('producedCode');  // Get the current code
    if (!producedCode || producedCode.trim().length === 0) {
      console.error('No code was found for review.');
      this.state.set('reviewFeedback', 'No code available for review.');
      return;
    }

    let reviewCount = this.state.get('reviewCount') || 0;
    reviewCount += 1;
    console.log(`Review ${reviewCount}: providing feedback on the code.`);

    const feedback = await this.provideFeedback(producedCode);

    if (!feedback || feedback.trim() === '') {
      console.error('No feedback generated by the model.');
      this.state.set('reviewFeedback', 'No feedback generated by the model.');
    } else {
      console.log(`Feedback received: ${feedback}`);
      this.state.set('reviewFeedback', feedback);  // Store feedback for developer to process
    }

    this.state.set('reviewCount', reviewCount);
  }

  async provideFeedback(code: string): Promise<string> {
    const systemPrompt = `You are a code reviewer. Return detailed feedback on how the code can be improved. If there are no issues, state 'no issues found'. Provide your feedback in JSON format as follows:
{
  "feedback": "Provide your feedback here."
}`;

    const userPrompt = `Please review the following code:\n\n${code}`;

    const reviewResponse = await this.model.call([
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ]);

    console.log('Raw response from model:', reviewResponse?.content);

    // Convert the response content to string
    const responseContent = reviewResponse?.content?.toString() || '';

    // Use a parser to enforce valid JSON feedback from the model
    const parser = new JsonOutputParser();
    try {
      const feedbackResponse = await parser.parse(responseContent);  // Now passing string content
      return feedbackResponse?.feedback || 'No valid feedback provided.';
    } catch (err) {
      console.error('Error parsing feedback:', err);
      return responseContent.trim() || 'No feedback provided.';
    }
  }
}